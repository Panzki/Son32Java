package son32map;
import com.ochafik.lang.jnaerator.runtime.Structure;
/**
 * <i>native declaration : Son.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TAdcMark extends Structure<TAdcMark, TAdcMark.ByValue, TAdcMark.ByReference > {
	/**
	 * the marker structure<br>
	 * C type : TMarker
	 */
	public TMarker m;
	/**
	 * the attached ADC data<br>
	 * C type : TAdc[1024 * 4]
	 */
	public short[] a = new short[(1024 * 4)];
	public TAdcMark() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"m", "a"});
	}
	/**
	 * @param m the marker structure<br>
	 * C type : TMarker<br>
	 * @param a the attached ADC data<br>
	 * C type : TAdc[1024 * 4]
	 */
	public TAdcMark(TMarker m, short a[]) {
		super();
		this.m = m;
		if (a.length != this.a.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.a = a;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected TAdcMark newInstance() { return new TAdcMark(); }
	public static TAdcMark[] newArray(int arrayLength) {
		return Structure.newArray(TAdcMark.class, arrayLength);
	}
	public static class ByReference extends TAdcMark implements Structure.ByReference {
		
	};
	public static class ByValue extends TAdcMark implements Structure.ByValue {
		
	};
}
