package son32map;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.Mangling;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
/**
 * JNA Wrapper for library <b>son32map</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Son32mapLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("son32map", true, son32map.Son32mapLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(son32map.Son32mapLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final Son32mapLibrary INSTANCE = (Son32mapLibrary)Native.loadLibrary(son32map.Son32mapLibrary.JNA_LIBRARY_NAME, son32map.Son32mapLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/**
	 * <i>native declaration : Son.h</i><br>
	 * enum values
	 */
	public static interface TDataKind {
		/**
		 * the channel is OFF -<br>
		 * <i>native declaration : Son.h:62</i>
		 */
		public static final int ChanOff = 0;
		/**
		 * a 16-bit waveform channel<br>
		 * <i>native declaration : Son.h:63</i>
		 */
		public static final int Adc = 1;
		/**
		 * Event times (falling edges)<br>
		 * <i>native declaration : Son.h:64</i>
		 */
		public static final int EventFall = 2;
		/**
		 * Event times (rising edges)<br>
		 * <i>native declaration : Son.h:65</i>
		 */
		public static final int EventRise = 3;
		/**
		 * Event times (both edges)<br>
		 * <i>native declaration : Son.h:66</i>
		 */
		public static final int EventBoth = 4;
		/**
		 * Event time plus 4 8-bit codes<br>
		 * <i>native declaration : Son.h:67</i>
		 */
		public static final int Marker = 5;
		/**
		 * Marker plus Adc waveform data<br>
		 * <i>native declaration : Son.h:68</i>
		 */
		public static final int AdcMark = 6;
		/**
		 * Marker plus float numbers<br>
		 * <i>native declaration : Son.h:69</i>
		 */
		public static final int RealMark = 7;
		/**
		 * Marker plus text string<br>
		 * <i>native declaration : Son.h:70</i>
		 */
		public static final int TextMark = 8;
		/**
		 * waveform of float numbers<br>
		 * <i>native declaration : Son.h:71</i>
		 */
		public static final int RealWave = 9;
	};
	/// <i>native declaration : Son.h</i>
	public static final int SON_FMASKSZ = 32;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FALLLAYERS = -1;
	/// <i>native declaration : Son.h</i>
	public static final int SON_BAD_READ = -17;
	/// <i>native declaration : Son.h</i>
	public static final int SON_CHANNEL_USED = -10;
	/// <i>native declaration : Son.h</i>
	public static final int SON_WRONG_FILE = -13;
	/// <i>native declaration : Son.h</i>
	public static final int SON_INVALID_DRIVE = -15;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_PATH = -3;
	/// <i>native declaration : Son.h</i>
	public static final int SON_BAD_WRITE = -18;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FMASK_VALID = 33554432;
	/// <i>native declaration : Son.h</i>
	public static final int SON_MEMORY_ZAP = -7;
	/// <i>native declaration : Son.h</i>
	public static final int SON_READ_ONLY = -21;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_DOS_FILE = -2;
	/// <i>native declaration : Son.h</i>
	public static final int SON_CORRUPT_FILE = -19;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FMASK_ORMODE = 33554432;
	/// <i>native declaration : Son.h</i>
	public static final int FastWrite = 0;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_ACCESS = -5;
	/// <i>native declaration : Son.h</i>
	public static final int SON_UNITSZ = 5;
	/// <i>native declaration : Son.h</i>
	public static final int SON_MAXREALMARK = 512;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FALLITEMS = -1;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FMASK_ANDMODE = 0;
	/// <i>native declaration : Son.h</i>
	public static final int SON_MAXTEXTMARK = 2048;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_EXTRA = -14;
	/// <i>native declaration : Son.h</i>
	public static final int SON_CHANCOMSZ = 71;
	/// <i>native declaration : Son.h</i>
	public static final int SONMAXCHANS = 32;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FREAD = -1;
	/// <i>native declaration : Son.h</i>
	public static final int SON_CHANNEL_UNUSED = -11;
	/// <i>native declaration : Son.h</i>
	public static final int SONABSMAXCHANS = 451;
	/// <i>native declaration : Son.h</i>
	public static final int SON_TITLESZ = 9;
	/// <i>native declaration : Son.h</i>
	public static final int SON_BAD_PARAM = -22;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FCLEAR = 0;
	/// <i>native declaration : Son.h</i>
	public static final int SON_BAD_HANDLE = -6;
	/// <i>native declaration : Son.h</i>
	public static final int SON_OUT_OF_HANDLES = -16;
	/// <i>native declaration : Son.h</i>
	public static final int SON_PAST_SOF = -20;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NUMFILECOMMENTS = 5;
	/// <i>native declaration : Son.h</i>
	public static final int SON_OUT_OF_MEMORY = -8;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_HANDLES = -4;
	/// <i>native declaration : Son.h</i>
	public static final int SON_COMMENTSZ = 79;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_FILE = -1;
	/// <i>native declaration : Son.h</i>
	public static final int SON_NO_CHANNEL = -9;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FSET = 1;
	/// <i>native declaration : Son.h</i>
	public static final int SON_PAST_EOF = -12;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FILE_ALREADY_OPEN = -600;
	/// <i>native declaration : Son.h</i>
	public static final int SON_MAXADCMARK = 1024;
	/// <i>native declaration : Son.h</i>
	public static final int SON_MAXAMTRACE = 4;
	/// <i>native declaration : Son.h</i>
	public static final int SON_FINVERT = 2;
	/// <i>native declaration : Son.h</i>
	public static final int NormalWrite = 1;
	/**
	 * Original signature : <code>SONInitFiles()</code><br>
	 * <i>native declaration : Son.h:195</i>
	 */
	@Mangling({"_Z12SONInitFilesv", "?SONInitFiles@@YAXXZ"}) 
	int SONInitFiles();
	/**
	 * Original signature : <code>SONCleanUp()</code><br>
	 * <i>native declaration : Son.h:196</i>
	 */
	@Mangling({"_Z10SONCleanUpv", "?SONCleanUp@@YAXXZ"}) 
	int SONCleanUp();
	/**
	 * Original signature : <code>SONOpenOldFile(TpCStr, int)</code><br>
	 * <i>native declaration : Son.h:198</i>
	 */
	@Mangling({"_Z14SONOpenOldFile6TpCStri", "?SONOpenOldFile@@YAX6TpCStrH@Z"}) 
	int SONOpenOldFile(Son32mapLibrary.TpCStr name, int iOpenMode);
	/**
	 * Original signature : <code>SONOpenNewFile(TpCStr, short, WORD)</code><br>
	 * <i>native declaration : Son.h:199</i>
	 */
	@Mangling({"_Z14SONOpenNewFile6TpCStri4WORD", "?SONOpenNewFile@@YAX6TpCStrH4WORD@Z"}) 
	int SONOpenNewFile(Son32mapLibrary.TpCStr name, short fMode, short extra);
	/**
	 * Original signature : <code>SONCanWrite(short)</code><br>
	 * <i>native declaration : Son.h:201</i>
	 */
	@Mangling({"_Z11SONCanWritei", "?SONCanWrite@@YAXH@Z"}) 
	int SONCanWrite(short fh);
	/**
	 * Original signature : <code>SONCloseFile(short)</code><br>
	 * <i>native declaration : Son.h:202</i>
	 */
	@Mangling({"_Z12SONCloseFilei", "?SONCloseFile@@YAXH@Z"}) 
	int SONCloseFile(short fh);
	/**
	 * Original signature : <code>SONEmptyFile(short)</code><br>
	 * <i>native declaration : Son.h:203</i>
	 */
	@Mangling({"_Z12SONEmptyFilei", "?SONEmptyFile@@YAXH@Z"}) 
	int SONEmptyFile(short fh);
	/**
	 * Original signature : <code>SONSetBuffSpace(short)</code><br>
	 * <i>native declaration : Son.h:204</i>
	 */
	@Mangling({"_Z15SONSetBuffSpacei", "?SONSetBuffSpace@@YAXH@Z"}) 
	int SONSetBuffSpace(short fh);
	/**
	 * Original signature : <code>SONGetFreeChan(short)</code><br>
	 * <i>native declaration : Son.h:205</i>
	 */
	@Mangling({"_Z14SONGetFreeChani", "?SONGetFreeChan@@YAXH@Z"}) 
	int SONGetFreeChan(short fh);
	/**
	 * Original signature : <code>SONSetFileClock(short, WORD, WORD)</code><br>
	 * <i>native declaration : Son.h:206</i>
	 */
	@Mangling({"_Z15SONSetFileClocki4WORD4WORD", "?SONSetFileClock@@YAXH4WORD4WORD@Z"}) 
	int SONSetFileClock(short fh, short usPerTime, short timePerADC);
	/**
	 * Original signature : <code>SONSetADCChan(short, WORD, short, short, long, TpCStr, TpCStr, float, float, float, TpCStr)</code><br>
	 * <i>native declaration : Son.h:207</i>
	 */
	@Mangling({"_Z13SONSetADCChani4WORDiil6TpCStr6TpCStrfff6TpCStr", "?SONSetADCChan@@YAXH4WORDHHJ6TpCStr6TpCStrMMM6TpCStr@Z"}) 
	int SONSetADCChan(short fh, short chan, short sPhyCh, short dvd, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, float scl, float offs, Son32mapLibrary.TpCStr szUnt);
	/**
	 * Original signature : <code>SONSetADCMarkChan(short, WORD, short, short, long, TpCStr, TpCStr, float, float, float, TpCStr, WORD, short)</code><br>
	 * <i>native declaration : Son.h:210</i>
	 */
	@Mangling({"_Z17SONSetADCMarkChani4WORDiil6TpCStr6TpCStrfff6TpCStr4WORDi", "?SONSetADCMarkChan@@YAXH4WORDHHJ6TpCStr6TpCStrMMM6TpCStr4WORDH@Z"}) 
	int SONSetADCMarkChan(short fh, short chan, short sPhyCh, short dvd, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, float scl, float offs, Son32mapLibrary.TpCStr szUnt, short points, short preTrig);
	/**
	 * Original signature : <code>SONSetWaveChan(short, WORD, short, TSTime, long, TpCStr, TpCStr, float, float, TpCStr)</code><br>
	 * <i>native declaration : Son.h:213</i>
	 */
	@Mangling({"_Z14SONSetWaveChani4WORDill6TpCStr6TpCStrff6TpCStr", "?SONSetWaveChan@@YAXH4WORDHJJ6TpCStr6TpCStrMM6TpCStr@Z"}) 
	int SONSetWaveChan(short fh, short chan, short sPhyCh, NativeLong dvd, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float scl, float offs, Son32mapLibrary.TpCStr szUnt);
	/**
	 * Original signature : <code>SONSetWaveMarkChan(short, WORD, short, TSTime, long, TpCStr, TpCStr, float, float, float, TpCStr, WORD, short, int)</code><br>
	 * <i>native declaration : Son.h:216</i>
	 */
	@Mangling({"_Z18SONSetWaveMarkChani4WORDill6TpCStr6TpCStrfff6TpCStr4WORDii", "?SONSetWaveMarkChan@@YAXH4WORDHJJ6TpCStr6TpCStrMMM6TpCStr4WORDHH@Z"}) 
	int SONSetWaveMarkChan(short fh, short chan, short sPhyCh, NativeLong dvd, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, float scl, float offs, Son32mapLibrary.TpCStr szUnt, short points, short preTrig, int nTrace);
	/**
	 * Original signature : <code>SONSetRealMarkChan(short, WORD, short, long, TpCStr, TpCStr, float, float, float, TpCStr, WORD)</code><br>
	 * <i>native declaration : Son.h:219</i>
	 */
	@Mangling({"_Z18SONSetRealMarkChani4WORDil6TpCStr6TpCStrfff6TpCStr4WORD", "?SONSetRealMarkChan@@YAXH4WORDHJ6TpCStr6TpCStrMMM6TpCStr4WORD@Z"}) 
	int SONSetRealMarkChan(short fh, short chan, short sPhyCh, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, float min, float max, Son32mapLibrary.TpCStr szUnt, short points);
	/**
	 * Original signature : <code>SONSetTextMarkChan(short, WORD, short, long, TpCStr, TpCStr, float, TpCStr, WORD)</code><br>
	 * <i>native declaration : Son.h:222</i>
	 */
	@Mangling({"_Z18SONSetTextMarkChani4WORDil6TpCStr6TpCStrf6TpCStr4WORD", "?SONSetTextMarkChan@@YAXH4WORDHJ6TpCStr6TpCStrM6TpCStr4WORD@Z"}) 
	int SONSetTextMarkChan(short fh, short chan, short sPhyCh, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, Son32mapLibrary.TpCStr szUnt, short points);
	/**
	 * Original signature : <code>SONSetInitLow(short, WORD, BOOLEAN)</code><br>
	 * <i>native declaration : Son.h:225</i>
	 */
	@Mangling({"_Z13SONSetInitLowi4WORD7BOOLEAN", "?SONSetInitLow@@YAXH4WORD7BOOLEAN@Z"}) 
	int SONSetInitLow(short fh, short chan, Son32mapLibrary.BOOLEAN bLow);
	/**
	 * Original signature : <code>SONSetEventChan(short, WORD, short, long, TpCStr, TpCStr, float, TDataKind)</code><br>
	 * <i>native declaration : Son.h:226</i>
	 */
	@Mangling({"_Z15SONSetEventChani4WORDil6TpCStr6TpCStrfi", "?SONSetEventChan@@YAXH4WORDHJ6TpCStr6TpCStrMH@Z"}) 
	int SONSetEventChan(short fh, short chan, short sPhyCh, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float fRate, int evtKind);
	/**
	 * Original signature : <code>SONSetBuffering(short, int, int)</code><br>
	 * <i>native declaration : Son.h:229</i>
	 */
	@Mangling({"_Z15SONSetBufferingiii", "?SONSetBuffering@@YAXHHH@Z"}) 
	int SONSetBuffering(short fh, int nChan, int nBytes);
	/**
	 * Original signature : <code>SONUpdateStart(short)</code><br>
	 * <i>native declaration : Son.h:230</i>
	 */
	@Mangling({"_Z14SONUpdateStarti", "?SONUpdateStart@@YAXH@Z"}) 
	int SONUpdateStart(short fh);
	/**
	 * Original signature : <code>SONSetFileComment(short, WORD, TpCStr)</code><br>
	 * <i>native declaration : Son.h:231</i>
	 */
	@Mangling({"_Z17SONSetFileCommenti4WORD6TpCStr", "?SONSetFileComment@@YAXH4WORD6TpCStr@Z"}) 
	int SONSetFileComment(short fh, short which, Son32mapLibrary.TpCStr szFCom);
	/**
	 * Original signature : <code>SONGetFileComment(short, WORD, TpStr, short)</code><br>
	 * <i>native declaration : Son.h:232</i>
	 */
	@Mangling({"_Z17SONGetFileCommenti4WORD5TpStri", "?SONGetFileComment@@YAXH4WORD5TpStrH@Z"}) 
	int SONGetFileComment(short fh, short which, Son32mapLibrary.TpStr pcFCom, short sMax);
	/**
	 * Original signature : <code>SONSetChanComment(short, WORD, TpCStr)</code><br>
	 * <i>native declaration : Son.h:233</i>
	 */
	@Mangling({"_Z17SONSetChanCommenti4WORD6TpCStr", "?SONSetChanComment@@YAXH4WORD6TpCStr@Z"}) 
	int SONSetChanComment(short fh, short chan, Son32mapLibrary.TpCStr szCom);
	/**
	 * Original signature : <code>SONGetChanComment(short, WORD, TpStr, short)</code><br>
	 * <i>native declaration : Son.h:234</i>
	 */
	@Mangling({"_Z17SONGetChanCommenti4WORD5TpStri", "?SONGetChanComment@@YAXH4WORD5TpStrH@Z"}) 
	int SONGetChanComment(short fh, short chan, Son32mapLibrary.TpStr pcCom, short sMax);
	/**
	 * Original signature : <code>SONSetChanTitle(short, WORD, TpCStr)</code><br>
	 * <i>native declaration : Son.h:235</i>
	 */
	@Mangling({"_Z15SONSetChanTitlei4WORD6TpCStr", "?SONSetChanTitle@@YAXH4WORD6TpCStr@Z"}) 
	int SONSetChanTitle(short fh, short chan, Son32mapLibrary.TpCStr szTitle);
	/**
	 * Original signature : <code>SONGetChanTitle(short, WORD, TpStr)</code><br>
	 * <i>native declaration : Son.h:236</i>
	 */
	@Mangling({"_Z15SONGetChanTitlei4WORD5TpStr", "?SONGetChanTitle@@YAXH4WORD5TpStr@Z"}) 
	int SONGetChanTitle(short fh, short chan, Son32mapLibrary.TpStr pcTitle);
	/**
	 * Original signature : <code>SONGetIdealLimits(short, WORD, TpFloat, TpFloat, TpFloat)</code><br>
	 * <i>native declaration : Son.h:237</i>
	 */
	@Mangling({"_Z17SONGetIdealLimitsi4WORD7TpFloat7TpFloat7TpFloat", "?SONGetIdealLimits@@YAXH4WORD7TpFloat7TpFloat7TpFloat@Z"}) 
	int SONGetIdealLimits(short fh, short chan, Son32mapLibrary.TpFloat pfRate, Son32mapLibrary.TpFloat pfMin, Son32mapLibrary.TpFloat pfMax);
	/**
	 * Original signature : <code>SONGetusPerTime(short)</code><br>
	 * <i>native declaration : Son.h:238</i>
	 */
	@Mangling({"_Z15SONGetusPerTimei", "?SONGetusPerTime@@YAXH@Z"}) 
	int SONGetusPerTime(short fh);
	/**
	 * Original signature : <code>SONGetTimePerADC(short)</code><br>
	 * <i>native declaration : Son.h:239</i>
	 */
	@Mangling({"_Z16SONGetTimePerADCi", "?SONGetTimePerADC@@YAXH@Z"}) 
	int SONGetTimePerADC(short fh);
	/**
	 * Original signature : <code>SONSetADCUnits(short, WORD, TpCStr)</code><br>
	 * <i>native declaration : Son.h:240</i>
	 */
	@Mangling({"_Z14SONSetADCUnitsi4WORD6TpCStr", "?SONSetADCUnits@@YAXH4WORD6TpCStr@Z"}) 
	int SONSetADCUnits(short fh, short chan, Son32mapLibrary.TpCStr szUnt);
	/**
	 * Original signature : <code>SONSetADCOffset(short, WORD, float)</code><br>
	 * <i>native declaration : Son.h:241</i>
	 */
	@Mangling({"_Z15SONSetADCOffseti4WORDf", "?SONSetADCOffset@@YAXH4WORDM@Z"}) 
	int SONSetADCOffset(short fh, short chan, float offset);
	/**
	 * Original signature : <code>SONSetADCScale(short, WORD, float)</code><br>
	 * <i>native declaration : Son.h:242</i>
	 */
	@Mangling({"_Z14SONSetADCScalei4WORDf", "?SONSetADCScale@@YAXH4WORDM@Z"}) 
	int SONSetADCScale(short fh, short chan, float scale);
	/**
	 * Original signature : <code>SONGetADCInfo(short, WORD, TpFloat, TpFloat, TpStr, TpWORD, TpShort)</code><br>
	 * <i>native declaration : Son.h:243</i>
	 */
	@Mangling({"_Z13SONGetADCInfoi4WORD7TpFloat7TpFloat5TpStr6TpWORDP11TFilterMask", "?SONGetADCInfo@@YAXH4WORD7TpFloat7TpFloat5TpStr6TpWORDPAUTFilterMask@@@Z"}) 
	int SONGetADCInfo(short fh, short chan, Son32mapLibrary.TpFloat scale, Son32mapLibrary.TpFloat offset, Son32mapLibrary.TpStr pcUnt, Son32mapLibrary.TpWORD points, TFilterMask preTrig);
	/**
	 * Original signature : <code>SONGetExtMarkInfo(short, WORD, TpStr, TpWORD, TpShort)</code><br>
	 * <i>native declaration : Son.h:245</i>
	 */
	@Mangling({"_Z17SONGetExtMarkInfoi4WORD5TpStr6TpWORDP11TFilterMask", "?SONGetExtMarkInfo@@YAXH4WORD5TpStr6TpWORDPAUTFilterMask@@@Z"}) 
	int SONGetExtMarkInfo(short fh, short chan, Son32mapLibrary.TpStr pcUnt, Son32mapLibrary.TpWORD points, TFilterMask preTrig);
	/**
	 * Original signature : <code>SONWriteEventBlock(short, WORD, TpSTime, long)</code><br>
	 * <i>native declaration : Son.h:248</i>
	 */
	@Mangling({"_Z18SONWriteEventBlocki4WORD7TpSTimel", "?SONWriteEventBlock@@YAXH4WORD7TpSTimeJ@Z"}) 
	int SONWriteEventBlock(short fh, short chan, Son32mapLibrary.TpSTime plBuf, NativeLong count);
	/**
	 * Original signature : <code>SONWriteMarkBlock(short, WORD, TpMarker, long)</code><br>
	 * <i>native declaration : Son.h:249</i>
	 */
	@Mangling({"_Z17SONWriteMarkBlocki4WORD8TpMarkerl", "?SONWriteMarkBlock@@YAXH4WORD8TpMarkerJ@Z"}) 
	int SONWriteMarkBlock(short fh, short chan, Son32mapLibrary.TpMarker pM, NativeLong count);
	/**
	 * Original signature : <code>SONWriteADCBlock(short, WORD, TpAdc, long, TSTime)</code><br>
	 * <i>native declaration : Son.h:250</i>
	 */
	@Mangling({"_Z16SONWriteADCBlocki4WORD5TpAdcll", "?SONWriteADCBlock@@YAXH4WORD5TpAdcJJ@Z"}) 
	int SONWriteADCBlock(short fh, short chan, Son32mapLibrary.TpAdc psBuf, NativeLong count, NativeLong sTime);
	/**
	 * Original signature : <code>SONWriteExtMarkBlock(short, WORD, TpMarker, long)</code><br>
	 * <i>native declaration : Son.h:251</i>
	 */
	@Mangling({"_Z20SONWriteExtMarkBlocki4WORD8TpMarkerl", "?SONWriteExtMarkBlock@@YAXH4WORD8TpMarkerJ@Z"}) 
	int SONWriteExtMarkBlock(short fh, short chan, Son32mapLibrary.TpMarker pM, NativeLong count);
	/**
	 * Original signature : <code>SONSave(short, int, TSTime, BOOLEAN)</code><br>
	 * <i>native declaration : Son.h:253</i>
	 */
	@Mangling({"_Z7SONSaveiil7BOOLEAN", "?SONSave@@YAXHHJ7BOOLEAN@Z"}) 
	int SONSave(short fh, int nChan, NativeLong sTime, Son32mapLibrary.BOOLEAN bKeep);
	/**
	 * Original signature : <code>SONSaveRange(short, int, TSTime, TSTime)</code><br>
	 * <i>native declaration : Son.h:254</i>
	 */
	@Mangling({"_Z12SONSaveRangeiill", "?SONSaveRange@@YAXHHJJ@Z"}) 
	int SONSaveRange(short fh, int nChan, NativeLong sTime, NativeLong eTime);
	/**
	 * Original signature : <code>SONKillRange(short, int, TSTime, TSTime)</code><br>
	 * <i>native declaration : Son.h:255</i>
	 */
	@Mangling({"_Z12SONKillRangeiill", "?SONKillRange@@YAXHHJJ@Z"}) 
	int SONKillRange(short fh, int nChan, NativeLong sTime, NativeLong eTime);
	/**
	 * Original signature : <code>SONIsSaving(short, int)</code><br>
	 * <i>native declaration : Son.h:256</i>
	 */
	@Mangling({"_Z11SONIsSavingii", "?SONIsSaving@@YAXHH@Z"}) 
	int SONIsSaving(short fh, int nChan);
	/**
	 * Original signature : <code>SONFileBytes(short)</code><br>
	 * <i>native declaration : Son.h:257</i>
	 */
	@Mangling({"_Z12SONFileBytesi", "?SONFileBytes@@YAXH@Z"}) 
	int SONFileBytes(short fh);
	/**
	 * Original signature : <code>SONChanBytes(short, WORD)</code><br>
	 * <i>native declaration : Son.h:258</i>
	 */
	@Mangling({"_Z12SONChanBytesi4WORD", "?SONChanBytes@@YAXH4WORD@Z"}) 
	int SONChanBytes(short fh, short chan);
	/**
	 * Original signature : <code>SONLatestTime(short, WORD, TSTime)</code><br>
	 * <i>native declaration : Son.h:260</i>
	 */
	@Mangling({"_Z13SONLatestTimei4WORDl", "?SONLatestTime@@YAXH4WORDJ@Z"}) 
	int SONLatestTime(short fh, short chan, NativeLong sTime);
	/**
	 * Original signature : <code>SONCommitIdle(short)</code><br>
	 * <i>native declaration : Son.h:261</i>
	 */
	@Mangling({"_Z13SONCommitIdlei", "?SONCommitIdle@@YAXH@Z"}) 
	int SONCommitIdle(short fh);
	/**
	 * Original signature : <code>SONCommitFile(short, BOOLEAN)</code><br>
	 * <i>native declaration : Son.h:262</i>
	 */
	@Mangling({"_Z13SONCommitFilei7BOOLEAN", "?SONCommitFile@@YAXH7BOOLEAN@Z"}) 
	int SONCommitFile(short fh, Son32mapLibrary.BOOLEAN bDelete);
	/**
	 * Original signature : <code>SONGetEventData(short, WORD, TpSTime, long, TSTime, TSTime, TpBOOL, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:264</i>
	 */
	@Mangling({"_Z15SONGetEventDatai4WORD7TpSTimelll6TpBOOL12TpFilterMask", "?SONGetEventData@@YAXH4WORD7TpSTimeJJJ6TpBOOL12TpFilterMask@Z"}) 
	int SONGetEventData(short fh, short chan, Son32mapLibrary.TpSTime plTimes, NativeLong max, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpBOOL levLowP, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONGetMarkData(short, WORD, TpMarker, long, TSTime, TSTime, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:267</i>
	 */
	@Mangling({"_Z14SONGetMarkDatai4WORD8TpMarkerlll12TpFilterMask", "?SONGetMarkData@@YAXH4WORD8TpMarkerJJJ12TpFilterMask@Z"}) 
	int SONGetMarkData(short fh, short chan, Son32mapLibrary.TpMarker pMark, NativeLong max, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONGetADCData(short, WORD, TpAdc, long, TSTime, TSTime, TpSTime, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:269</i>
	 */
	@Mangling({"_Z13SONGetADCDatai4WORD5TpAdclll7TpSTime12TpFilterMask", "?SONGetADCData@@YAXH4WORD5TpAdcJJJ7TpSTime12TpFilterMask@Z"}) 
	int SONGetADCData(short fh, short chan, Son32mapLibrary.TpAdc adcDataP, NativeLong max, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpSTime pbTime, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONGetExtMarkData(short, WORD, TpMarker, long, TSTime, TSTime, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:273</i>
	 */
	@Mangling({"_Z17SONGetExtMarkDatai4WORD8TpMarkerlll12TpFilterMask", "?SONGetExtMarkData@@YAXH4WORD8TpMarkerJJJ12TpFilterMask@Z"}) 
	int SONGetExtMarkData(short fh, short chan, Son32mapLibrary.TpMarker pMark, NativeLong max, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONGetExtraDataSize(short)</code><br>
	 * <i>native declaration : Son.h:275</i>
	 */
	@Mangling({"_Z19SONGetExtraDataSizei", "?SONGetExtraDataSize@@YAXH@Z"}) 
	int SONGetExtraDataSize(short fh);
	/**
	 * Original signature : <code>SONGetVersion(short)</code><br>
	 * <i>native declaration : Son.h:276</i>
	 */
	@Mangling({"_Z13SONGetVersioni", "?SONGetVersion@@YAXH@Z"}) 
	int SONGetVersion(short fh);
	/**
	 * Original signature : <code>SONGetExtraData(short, TpVoid, WORD, WORD, BOOLEAN)</code><br>
	 * <i>native declaration : Son.h:277</i>
	 */
	@Mangling({"_Z15SONGetExtraDatai6TpVoid4WORD4WORD7BOOLEAN", "?SONGetExtraData@@YAXH6TpVoid4WORD4WORD7BOOLEAN@Z"}) 
	int SONGetExtraData(short fh, Son32mapLibrary.TpVoid buff, short bytes, short offset, Son32mapLibrary.BOOLEAN writeIt);
	/**
	 * Original signature : <code>SONSetMarker(short, WORD, TSTime, TpMarker, WORD)</code><br>
	 * <i>native declaration : Son.h:279</i>
	 */
	@Mangling({"_Z12SONSetMarkeri4WORDl8TpMarker4WORD", "?SONSetMarker@@YAXH4WORDJ8TpMarker4WORD@Z"}) 
	int SONSetMarker(short fh, short chan, NativeLong time, Son32mapLibrary.TpMarker pMark, short size);
	/**
	 * Original signature : <code>SONChanDelete(short, WORD)</code><br>
	 * <i>native declaration : Son.h:281</i>
	 */
	@Mangling({"_Z13SONChanDeletei4WORD", "?SONChanDelete@@YAXH4WORD@Z"}) 
	int SONChanDelete(short fh, short chan);
	/**
	 * Original signature : <code>SONChanKind(short, WORD)</code><br>
	 * <i>native declaration : Son.h:282</i>
	 */
	@Mangling({"_Z11SONChanKindi4WORD", "?SONChanKind@@YAXH4WORD@Z"}) 
	int SONChanKind(short fh, short chan);
	/**
	 * Original signature : <code>SONChanDivide(short, WORD)</code><br>
	 * <i>native declaration : Son.h:283</i>
	 */
	@Mangling({"_Z13SONChanDividei4WORD", "?SONChanDivide@@YAXH4WORD@Z"}) 
	int SONChanDivide(short fh, short chan);
	/**
	 * Original signature : <code>SONItemSize(short, WORD)</code><br>
	 * <i>native declaration : Son.h:284</i>
	 */
	@Mangling({"_Z11SONItemSizei4WORD", "?SONItemSize@@YAXH4WORD@Z"}) 
	int SONItemSize(short fh, short chan);
	/**
	 * Original signature : <code>SONChanMaxTime(short, WORD)</code><br>
	 * <i>native declaration : Son.h:285</i>
	 */
	@Mangling({"_Z14SONChanMaxTimei4WORD", "?SONChanMaxTime@@YAXH4WORD@Z"}) 
	int SONChanMaxTime(short fh, short chan);
	/**
	 * Original signature : <code>SONMaxTime(short)</code><br>
	 * <i>native declaration : Son.h:286</i>
	 */
	@Mangling({"_Z10SONMaxTimei", "?SONMaxTime@@YAXH@Z"}) 
	int SONMaxTime(short fh);
	/**
	 * Original signature : <code>SONLastTime(short, WORD, TSTime, TSTime, TpVoid, TpMarkBytes, TpBOOL, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:288</i>
	 */
	@Mangling({"_Z11SONLastTimei4WORDll6TpVoid11TpMarkBytes6TpBOOL12TpFilterMask", "?SONLastTime@@YAXH4WORDJJ6TpVoid11TpMarkBytes6TpBOOL12TpFilterMask@Z"}) 
	int SONLastTime(short fh, short wChan, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpVoid pvVal, Son32mapLibrary.TpMarkBytes pMB, Son32mapLibrary.TpBOOL pbMk, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONLastPointsTime(short, WORD, TSTime, TSTime, long, BOOLEAN, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:292</i>
	 */
	@Mangling({"_Z17SONLastPointsTimei4WORDlll7BOOLEAN12TpFilterMask", "?SONLastPointsTime@@YAXH4WORDJJJ7BOOLEAN12TpFilterMask@Z"}) 
	int SONLastPointsTime(short fh, short wChan, NativeLong sTime, NativeLong eTime, NativeLong lPoints, Son32mapLibrary.BOOLEAN bAdc, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONFileSize(short)</code><br>
	 * <i>native declaration : Son.h:295</i>
	 */
	@Mangling({"_Z11SONFileSizei", "?SONFileSize@@YAXH@Z"}) 
	int SONFileSize(short fh);
	/**
	 * Original signature : <code>SONMarkerItem(short, WORD, TpMarker, int, TpMarker, TpVoid, BOOLEAN)</code><br>
	 * <i>native declaration : Son.h:296</i>
	 */
	@Mangling({"_Z13SONMarkerItemi4WORD8TpMarkeri8TpMarker6TpVoid7BOOLEAN", "?SONMarkerItem@@YAXH4WORD8TpMarkerH8TpMarker6TpVoid7BOOLEAN@Z"}) 
	int SONMarkerItem(short fh, short wChan, Son32mapLibrary.TpMarker pBuff, int n, Son32mapLibrary.TpMarker pM, Son32mapLibrary.TpVoid pvData, Son32mapLibrary.BOOLEAN bSet);
	/**
	 * Original signature : <code>SONFilter(TpMarker, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:299</i>
	 */
	@Mangling({"_Z9SONFilter8TpMarker12TpFilterMask", "?SONFilter@@YAX8TpMarker12TpFilterMask@Z"}) 
	int SONFilter(Son32mapLibrary.TpMarker pM, Son32mapLibrary.TpFilterMask pFM);
	/**
	 * Original signature : <code>SONFControl(TpFilterMask, int, int, int)</code><br>
	 * <i>native declaration : Son.h:300</i>
	 */
	@Mangling({"_Z11SONFControl12TpFilterMaskiii", "?SONFControl@@YAX12TpFilterMaskHHH@Z"}) 
	int SONFControl(Son32mapLibrary.TpFilterMask pFM, int layer, int item, int set);
	/**
	 * Original signature : <code>SONFEqual(TpFilterMask, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:301</i>
	 */
	@Mangling({"_Z9SONFEqual12TpFilterMask12TpFilterMask", "?SONFEqual@@YAX12TpFilterMask12TpFilterMask@Z"}) 
	int SONFEqual(Son32mapLibrary.TpFilterMask pFiltMask1, Son32mapLibrary.TpFilterMask pFiltMask2);
	/**
	 * added 14/May/02<br>
	 * Original signature : <code>SONFActive(TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:302</i>
	 */
	@Mangling({"_Z10SONFActive12TpFilterMask", "?SONFActive@@YAX12TpFilterMask@Z"}) 
	int SONFActive(Son32mapLibrary.TpFilterMask pFM);
	/**
	 * Original signature : <code>SONFMode(TpFilterMask, long)</code><br>
	 * <i>native declaration : Son.h:305</i>
	 */
	@Mangling({"_Z8SONFMode12TpFilterMaskl", "?SONFMode@@YAX12TpFilterMaskJ@Z"}) 
	int SONFMode(Son32mapLibrary.TpFilterMask pFM, NativeLong lNew);
	/**
	 * Original signature : <code>SONCreateFile(TpCStr, int, WORD)</code><br>
	 * <i>native declaration : Son.h:322</i>
	 */
	@Mangling({"_Z13SONCreateFile6TpCStri4WORD", "?SONCreateFile@@YAX6TpCStrH4WORD@Z"}) 
	int SONCreateFile(Son32mapLibrary.TpCStr name, int nChannels, short extra);
	/**
	 * Original signature : <code>SONMaxChans(short)</code><br>
	 * <i>native declaration : Son.h:323</i>
	 */
	@Mangling({"_Z11SONMaxChansi", "?SONMaxChans@@YAXH@Z"}) 
	int SONMaxChans(short fh);
	/**
	 * Original signature : <code>SONPhyChan(short, WORD)</code><br>
	 * <i>native declaration : Son.h:324</i>
	 */
	@Mangling({"_Z10SONPhyChani4WORD", "?SONPhyChan@@YAXH4WORD@Z"}) 
	int SONPhyChan(short fh, short wChan);
	/**
	 * Original signature : <code>SONIdealRate(short, WORD, float)</code><br>
	 * <i>native declaration : Son.h:325</i>
	 */
	@Mangling({"_Z12SONIdealRatei4WORDf", "?SONIdealRate@@YAXH4WORDM@Z"}) 
	int SONIdealRate(short fh, short wChan, float fIR);
	/**
	 * Original signature : <code>SONYRange(short, WORD, TpFloat, TpFloat)</code><br>
	 * <i>native declaration : Son.h:326</i>
	 */
	@Mangling({"_Z9SONYRangei4WORD7TpFloat7TpFloat", "?SONYRange@@YAXH4WORD7TpFloat7TpFloat@Z"}) 
	int SONYRange(short fh, short chan, Son32mapLibrary.TpFloat pfMin, Son32mapLibrary.TpFloat pfMax);
	/**
	 * Original signature : <code>SONYRangeSet(short, WORD, float, float)</code><br>
	 * <i>native declaration : Son.h:327</i>
	 */
	@Mangling({"_Z12SONYRangeSeti4WORDff", "?SONYRangeSet@@YAXH4WORDMM@Z"}) 
	int SONYRangeSet(short fh, short chan, float fMin, float fMax);
	/**
	 * Original signature : <code>SONMaxItems(short, WORD)</code><br>
	 * <i>native declaration : Son.h:328</i>
	 */
	@Mangling({"_Z11SONMaxItemsi4WORD", "?SONMaxItems@@YAXH4WORD@Z"}) 
	int SONMaxItems(short fh, short chan);
	/**
	 * Original signature : <code>SONPhySz(short, WORD)</code><br>
	 * <i>native declaration : Son.h:329</i>
	 */
	@Mangling({"_Z8SONPhySzi4WORD", "?SONPhySz@@YAXH4WORD@Z"}) 
	int SONPhySz(short fh, short chan);
	/**
	 * Original signature : <code>SONBlocks(short, WORD)</code><br>
	 * <i>native declaration : Son.h:330</i>
	 */
	@Mangling({"_Z9SONBlocksi4WORD", "?SONBlocks@@YAXH4WORD@Z"}) 
	int SONBlocks(short fh, short chan);
	/**
	 * Original signature : <code>SONDelBlocks(short, WORD)</code><br>
	 * <i>native declaration : Son.h:331</i>
	 */
	@Mangling({"_Z12SONDelBlocksi4WORD", "?SONDelBlocks@@YAXH4WORD@Z"}) 
	int SONDelBlocks(short fh, short chan);
	/**
	 * Original signature : <code>SONSetRealChan(short, WORD, short, TSTime, long, TpCStr, TpCStr, float, float, TpCStr)</code><br>
	 * <i>native declaration : Son.h:332</i>
	 */
	@Mangling({"_Z14SONSetRealChani4WORDill6TpCStr6TpCStrff6TpCStr", "?SONSetRealChan@@YAXH4WORDHJJ6TpCStr6TpCStrMM6TpCStr@Z"}) 
	int SONSetRealChan(short fh, short chan, short sPhyChan, NativeLong dvd, NativeLong lBufSz, Son32mapLibrary.TpCStr szCom, Son32mapLibrary.TpCStr szTitle, float scale, float offset, Son32mapLibrary.TpCStr szUnt);
	/**
	 * Original signature : <code>SONWriteRealBlock(short, WORD, TpFloat, long, TSTime)</code><br>
	 * <i>native declaration : Son.h:335</i>
	 */
	@Mangling({"_Z17SONWriteRealBlocki4WORD7TpFloatll", "?SONWriteRealBlock@@YAXH4WORD7TpFloatJJ@Z"}) 
	int SONWriteRealBlock(short fh, short chan, Son32mapLibrary.TpFloat pfBuff, NativeLong count, NativeLong sTime);
	/**
	 * Original signature : <code>SONGetRealData(short, WORD, TpFloat, long, TSTime, TSTime, TpSTime, TpFilterMask)</code><br>
	 * <i>native declaration : Son.h:336</i>
	 */
	@Mangling({"_Z14SONGetRealDatai4WORD7TpFloatlll7TpSTime12TpFilterMask", "?SONGetRealData@@YAXH4WORD7TpFloatJJJ7TpSTime12TpFilterMask@Z"}) 
	int SONGetRealData(short fh, short chan, Son32mapLibrary.TpFloat pfData, NativeLong max, NativeLong sTime, NativeLong eTime, Son32mapLibrary.TpSTime pbTime, Son32mapLibrary.TpFilterMask pFiltMask);
	/**
	 * Original signature : <code>SONTimeDate(short, TSONTimeDate*, const TSONTimeDate*)</code><br>
	 * <i>native declaration : Son.h:339</i>
	 */
	@Mangling({"_Z11SONTimeDateiP12TSONTimeDatePK12TSONTimeDate", "?SONTimeDate@@YAXHPAUTSONTimeDate@@PAUTSONTimeDate@@@Z"}) 
	int SONTimeDate(short fh, TSONTimeDate pTDGet, TSONTimeDate pTDSet);
	/**
	 * Original signature : <code>SONTimeBase(short, double)</code><br>
	 * <i>native declaration : Son.h:340</i>
	 */
	@Mangling({"_Z11SONTimeBaseid", "?SONTimeBase@@YAXHN@Z"}) 
	int SONTimeBase(short fh, double dTB);
	/**
	 * Original signature : <code>SONAppID(short, TSONCreator*, const TSONCreator*)</code><br>
	 * <i>native declaration : Son.h:342</i>
	 */
	@Mangling({"_Z8SONAppIDiP11TSONCreatorPK11TSONCreator", "?SONAppID@@YAXHPAUTSONCreator@@PAUTSONCreator@@@Z"}) 
	int SONAppID(short fh, TSONCreator pCGet, TSONCreator pCSet);
	/**
	 * Original signature : <code>SONChanInterleave(short, WORD)</code><br>
	 * <i>native declaration : Son.h:343</i>
	 */
	@Mangling({"_Z17SONChanInterleavei4WORD", "?SONChanInterleave@@YAXH4WORD@Z"}) 
	int SONChanInterleave(short fh, short chan);
	/**
	 * Original signature : <code>SONExtMarkAlign(short, int)</code><br>
	 * <i>native declaration : Son.h:346</i>
	 */
	@Mangling({"_Z15SONExtMarkAlignii", "?SONExtMarkAlign@@YAXHH@Z"}) 
	int SONExtMarkAlign(short fh, int n);
	/**
	 * Original signature : <code>SONFileSizeD(short)</code><br>
	 * <i>native declaration : Son.h:349</i>
	 */
	@Mangling({"_Z12SONFileSizeDi", "?SONFileSizeD@@YAXH@Z"}) 
	int SONFileSizeD(short fh);
	/**
	 * Original signature : <code>SONChanBytesD(short, WORD)</code><br>
	 * <i>native declaration : Son.h:350</i>
	 */
	@Mangling({"_Z13SONChanBytesDi4WORD", "?SONChanBytesD@@YAXH4WORD@Z"}) 
	int SONChanBytesD(short fh, short chan);
	/**
	 * Original signature : <code>SONCreateFileEx(TpCStr, int, WORD, int)</code><br>
	 * <i>native declaration : Son.h:351</i>
	 */
	@Mangling({"_Z15SONCreateFileEx6TpCStri4WORDi", "?SONCreateFileEx@@YAX6TpCStrH4WORDH@Z"}) 
	int SONCreateFileEx(Son32mapLibrary.TpCStr name, int nChannels, short extra, int iBigFile);
	/**
	 * Original signature : <code>SONIsBigFile(short)</code><br>
	 * <i>native declaration : Son.h:352</i>
	 */
	@Mangling({"_Z12SONIsBigFilei", "?SONIsBigFile@@YAXH@Z"}) 
	int SONIsBigFile(short fh);
	/**
	 * Original signature : <code>SONUpdateHeader(short)</code><br>
	 * <i>native declaration : Son.h:353</i>
	 */
	@Mangling({"_Z15SONUpdateHeaderi", "?SONUpdateHeader@@YAXH@Z"}) 
	int SONUpdateHeader(short fh);
	/// Undefined type
	public static interface TpFilterMask {
		
	};
	/// Undefined type
	public static interface TpStr {
		
	};
	/// Undefined type
	public static interface TpBOOL {
		
	};
	/// Undefined type
	public static interface TpFloat {
		
	};
	/// Undefined type
	public static interface TpSTime {
		
	};
	/// Undefined type
	public static interface TpAdc {
		
	};
	/// Undefined type
	public static interface TpMarker {
		
	};
	/// Undefined type
	public static interface TpMarkBytes {
		
	};
	/// Undefined type
	public static interface TpVoid {
		
	};
	/// Undefined type
	public static interface TpCStr {
		
	};
	/// Undefined type
	public static interface TpWORD {
		
	};
	/// Undefined type
	public static interface BOOLEAN {
		
	};
}
