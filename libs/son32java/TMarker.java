package son32map;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
/**
 * <i>native declaration : Son.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TMarker extends Structure<TMarker, TMarker.ByValue, TMarker.ByReference > {
	/**
	 * Marker time as for events<br>
	 * C type : TSTime
	 */
	public NativeLong mark;
	/**
	 * the marker values<br>
	 * C type : TMarkBytes
	 */
	public byte[] mvals = new byte[(4)];
	public TMarker() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"mark", "mvals"});
	}
	/**
	 * @param mark Marker time as for events<br>
	 * C type : TSTime<br>
	 * @param mvals the marker values<br>
	 * C type : TMarkBytes
	 */
	public TMarker(NativeLong mark, byte mvals[]) {
		super();
		this.mark = mark;
		if (mvals.length != this.mvals.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mvals = mvals;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected TMarker newInstance() { return new TMarker(); }
	public static TMarker[] newArray(int arrayLength) {
		return Structure.newArray(TMarker.class, arrayLength);
	}
	public static class ByReference extends TMarker implements Structure.ByReference {
		
	};
	public static class ByValue extends TMarker implements Structure.ByValue {
		
	};
}
