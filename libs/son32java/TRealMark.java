package son32map;
import com.ochafik.lang.jnaerator.runtime.Structure;
/**
 * <i>native declaration : Son.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TRealMark extends Structure<TRealMark, TRealMark.ByValue, TRealMark.ByReference > {
	/**
	 * the marker structure<br>
	 * C type : TMarker
	 */
	public TMarker m;
	/**
	 * the attached floating point data<br>
	 * C type : float[512]
	 */
	public float[] r = new float[(512)];
	public TRealMark() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"m", "r"});
	}
	/**
	 * @param m the marker structure<br>
	 * C type : TMarker<br>
	 * @param r the attached floating point data<br>
	 * C type : float[512]
	 */
	public TRealMark(TMarker m, float r[]) {
		super();
		this.m = m;
		if (r.length != this.r.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.r = r;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected TRealMark newInstance() { return new TRealMark(); }
	public static TRealMark[] newArray(int arrayLength) {
		return Structure.newArray(TRealMark.class, arrayLength);
	}
	public static class ByReference extends TRealMark implements Structure.ByReference {
		
	};
	public static class ByValue extends TRealMark implements Structure.ByValue {
		
	};
}
